/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.5 at Wed Apr 13 13:07:59 2016. */

#ifndef PB_RADIO_PB_H_INCLUDED
#define PB_RADIO_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _RadioProtocolWrapper {
    pb_callback_t command;
    pb_callback_t robotsettings;
    pb_callback_t basesettings;
/* @@protoc_insertion_point(struct:RadioProtocolWrapper) */
} RadioProtocolWrapper;

typedef struct _BasestationSettings {
    bool has_frequency;
    int32_t frequency;
/* @@protoc_insertion_point(struct:BasestationSettings) */
} BasestationSettings;

typedef struct _RadioProtocolCommand {
    int32_t robot_id;
    float velocity_x;
    float velocity_y;
    float velocity_r;
    bool has_flat_kick;
    float flat_kick;
    bool has_chip_kick;
    float chip_kick;
    bool has_dribbler_spin;
    float dribbler_spin;
    bool has_distance;
    int32_t distance;
/* @@protoc_insertion_point(struct:RadioProtocolCommand) */
} RadioProtocolCommand;

typedef struct _RobotSettings {
    bool has_robot_id;
    int32_t robot_id;
    bool has_request;
    bool request;
/* @@protoc_insertion_point(struct:RobotSettings) */
} RobotSettings;

/* Default values for struct fields */

/* Initializer values for message structs */
#define RadioProtocolWrapper_init_default        {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioProtocolCommand_init_default        {0, 0, 0, 0, false, 0, false, 0, false, 0, false, 0}
#define BasestationSettings_init_default         {false, 0}
#define RobotSettings_init_default               {false, 0, false, 0}
#define RadioProtocolWrapper_init_zero           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define RadioProtocolCommand_init_zero           {0, 0, 0, 0, false, 0, false, 0, false, 0, false, 0}
#define BasestationSettings_init_zero            {false, 0}
#define RobotSettings_init_zero                  {false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define RadioProtocolWrapper_command_tag         1
#define RadioProtocolWrapper_robotsettings_tag   2
#define RadioProtocolWrapper_basesettings_tag    3
#define BasestationSettings_frequency_tag        1
#define RadioProtocolCommand_robot_id_tag        1
#define RadioProtocolCommand_velocity_x_tag      2
#define RadioProtocolCommand_velocity_y_tag      3
#define RadioProtocolCommand_velocity_r_tag      4
#define RadioProtocolCommand_flat_kick_tag       5
#define RadioProtocolCommand_chip_kick_tag       6
#define RadioProtocolCommand_dribbler_spin_tag   7
#define RadioProtocolCommand_distance_tag        8
#define RobotSettings_robot_id_tag               1
#define RobotSettings_request_tag                2

/* Struct field encoding specification for nanopb */
extern const pb_field_t RadioProtocolWrapper_fields[4];
extern const pb_field_t RadioProtocolCommand_fields[9];
extern const pb_field_t BasestationSettings_fields[2];
extern const pb_field_t RobotSettings_fields[3];

/* Maximum encoded size of messages (where known) */
#define RadioProtocolCommand_size                52
#define BasestationSettings_size                 11
#define RobotSettings_size                       13

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define RADIO_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
