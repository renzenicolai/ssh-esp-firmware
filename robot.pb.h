/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Wed May 24 15:18:18 2017. */

#ifndef PB_ROBOT_PB_H_INCLUDED
#define PB_ROBOT_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Command_Action {
    float dribble;
    float kick;
    float chip;
/* @@protoc_insertion_point(struct:Command_Action) */
} Command_Action;

typedef struct _Command_Move {
    float x;
    float y;
    float r;
/* @@protoc_insertion_point(struct:Command_Move) */
} Command_Move;

typedef struct _Command_Setting {
    uint32_t id;
    pb_callback_t name;
    pb_callback_t value;
/* @@protoc_insertion_point(struct:Command_Setting) */
} Command_Setting;

typedef struct _Measurements {
    uint32_t id;
    pb_callback_t measurements;
/* @@protoc_insertion_point(struct:Measurements) */
} Measurements;

typedef struct _Measurements_Single {
    pb_callback_t label;
    float value;
    int32_t tenFoldMultiplier;
/* @@protoc_insertion_point(struct:Measurements_Single) */
} Measurements_Single;

typedef struct _Command {
    uint32_t id;
    Command_Move move;
    Command_Action action;
    pb_callback_t settings;
/* @@protoc_insertion_point(struct:Command) */
} Command;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Command_init_default                     {0, Command_Move_init_default, Command_Action_init_default, {{NULL}, NULL}}
#define Command_Move_init_default                {0, 0, 0}
#define Command_Action_init_default              {0, 0, 0}
#define Command_Setting_init_default             {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Measurements_init_default                {0, {{NULL}, NULL}}
#define Measurements_Single_init_default         {{{NULL}, NULL}, 0, 0}
#define Command_init_zero                        {0, Command_Move_init_zero, Command_Action_init_zero, {{NULL}, NULL}}
#define Command_Move_init_zero                   {0, 0, 0}
#define Command_Action_init_zero                 {0, 0, 0}
#define Command_Setting_init_zero                {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define Measurements_init_zero                   {0, {{NULL}, NULL}}
#define Measurements_Single_init_zero            {{{NULL}, NULL}, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Command_Action_dribble_tag               1
#define Command_Action_kick_tag                  2
#define Command_Action_chip_tag                  3
#define Command_Move_x_tag                       1
#define Command_Move_y_tag                       2
#define Command_Move_r_tag                       3
#define Command_Setting_id_tag                   1
#define Command_Setting_name_tag                 2
#define Command_Setting_value_tag                3
#define Measurements_id_tag                      1
#define Measurements_measurements_tag            2
#define Measurements_Single_label_tag            1
#define Measurements_Single_value_tag            2
#define Measurements_Single_tenFoldMultiplier_tag 3
#define Command_id_tag                           1
#define Command_move_tag                         2
#define Command_action_tag                       3
#define Command_settings_tag                     4

/* Struct field encoding specification for nanopb */
extern const pb_field_t Command_fields[5];
extern const pb_field_t Command_Move_fields[4];
extern const pb_field_t Command_Action_fields[4];
extern const pb_field_t Command_Setting_fields[4];
extern const pb_field_t Measurements_fields[3];
extern const pb_field_t Measurements_Single_fields[4];

/* Maximum encoded size of messages (where known) */
/* Command_size depends on runtime parameters */
#define Command_Move_size                        15
#define Command_Action_size                      15
/* Command_Setting_size depends on runtime parameters */
/* Measurements_size depends on runtime parameters */
/* Measurements_Single_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ROBOT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
